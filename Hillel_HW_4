
# Завдання 1
# Написати програму, яка просить в користувача ввести через пробіл міста, в яких він був за минулі 10 років
# потім окремо запросити у користувача міста, куди він хоче поїхати внаступні 10 років
# вивести на екран повідомлення з текстом про те, що користувачу, мабуть, дуже сподобалося в містах, які він повторив в
# двох циклах вводу, а саме... (сформувати строку, використовуючи join)
# якщо повтору не було - вивести повідомлення, що користувач відкритий до чогось нового
# Врахувати випадки, що користувач нічого не вводить не потрібно, в даному випадку вам явно зазначено,
# що ці перевірки не потрібні.
# не потрібно перевіряти введення цифр
# Ми виходим із того, що користувач введе щось на зразок "Київ Тернопіль париЖ акапулько-80"
# В той же час врахуйте, що користувач може вводити дані в різних регістрах


visited_cities_str = input('Введіть назви міст, в котрих ви були за останні 10 років: ')

lst1 = visited_cities_str.split()
lst2 = []
for x in lst1:
    city_norm = x.strip().capitalize()
    lst2.append(city_norm)
print(lst2)

wish_cities = input('Введіть назви міст, в котрих ви хотіли би побувати: ')
lst3 = wish_cities.split()
lst4 = []
for x in lst3:
    city_norm = x.strip().capitalize()
    lst4.append(city_norm)
print(lst4)

last_city = set(lst2)
# print(s1)
new_city = set(lst4)
# print(s2)
same_city = last_city.intersection(new_city)
# print(s3)

if same_city:
    print('Мабуть вам дуже подобаються ці міста: ' + ', '.join(list(same_city)))

if not same_city:
    print('Ви відкриті до чогось нового. ' + ', '.join(list(same_city)))


# #Завдання 2
#
# дано код Морзе, що зберігається в словнику
#
# є стрічка, в якій слова розділені 2 пробілами, а букви в слові - одним пробілом
#
# написати програму по декодуванню даної (чи подібної) стрічки
#
# ПІДКАЗКА - при потребі можна створити симетричний словник, де ключами буде код Морзе, а значеннями - символи латиниці
#
# """

MORSE_CODE_DICT = {
    'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....',
    'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.',
    'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
    'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',
    '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----', ', ': '--..--', '.': '.-.-.-',
    '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-'
}

string_to_decode1 = '..  .-.. .. -.- .  .--. -.-- - .... --- -.  ...-- .-.-.- .---- ----- '
string_to_decode2 = '..  -.- -. --- .-- --..--  -.-- --- ..-  -.-. .- -.  -.. ---  .. - '
MORSE_CODE_DICT = {
    'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....',
    'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.',
    'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
    'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',
    '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----', ', ': '--..--', '.': '.-.-.-',
    '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-'
}

string_to_decode1 = '..  .-.. .. -.- .  .--. -.-- - .... --- -.  ...-- .-.-.- .---- ----- '
string_to_decode2 = '..  -.- -. --- .-- --..--  -.-- --- ..-  -.-. .- -.  -.. ---  .. - '

a = []
words_a = string_to_decode1.strip().split('  ')
for word in words_a:
  a.append(word.split(' '))

# print(a)
[['..'], ['.-..', '..', '-.-', '.'], ['.--.', '-.--', '-', '....', '---', '-.'], ['...--', '.-.-.-', '.----', '-----', '']]
b = []
words_b = string_to_decode2.strip().split('  ')
for word in words_b:
    b.append(word.split(' '))
# print(b)
[['..'], ['-.-', '-.', '---', '.--', '--..--'], ['-.--', '---', '..-'], ['-.-.', '.-', '-.'], ['-..', '---'], ['..', '-']]

MORSE_CODE_DICT_SIMETRIC = {}
for key, value in MORSE_CODE_DICT.items():
    MORSE_CODE_DICT_SIMETRIC[value] = key
# print(MORSE_CODE_DICT_SIMETRIC)
# {'.-': 'A', '-...': 'B', '-.-.': 'C', '-..': 'D', '.': 'E', '..-.': 'F', '--.': 'G', '....': 'H', '..': 'I', '.---': 'J', '-.-': 'K', '.-..': 'L', '--': 'M', '-.': 'N', '---': 'O', '.--.': 'P', '--.-': 'Q', '.-.': 'R', '...': 'S', '-': 'T', '..-': 'U', '...-': 'V', '.--': 'W', '-..-': 'X', '-.--': 'Y', '--..': 'Z', '.----': '1', '..---': '2', '...--': '3', '....-': '4', '.....': '5', '-....': '6', '--...': '7', '---..': '8', '----.': '9', '-----': '0', '--..--': ', ', '.-.-.-': '.', '..--..': '?', '-..-.': '/', '-....-': '-', '-.--.': '(', '-.--.-': ')'}

a_translated = []
for word in a:
  for symb in word:
    a_translated.append(MORSE_CODE_DICT_SIMETRIC[symb])
  a_translated.append(' ')

print(''.join(a_translated))

b_translated = []
for word in b:
    for symb in word:
        b_translated.append(MORSE_CODE_DICT_SIMETRIC[symb])
    b_translated.append(' ')

print(''.join(b_translated))


Завдання 3
макс 50 балів
зауважте, що значення, що зберігається в кожному елементі - теж словник, і доступ до вкладеного списку
здійснюється за механізмом
student[outer_dict_key][inner_dict_key]

Є дані студентів (комбінація імені та прізвища унікальна), що зберігаються за допомогою словника
1 - програмно добавити одного студента, з заповненням усіх полів (вік - від 18 до 40, цілочисельне значення,
    бал від 0 до 100 (інт чи флоат)
2 - створити і вивести на екран список студентів (імя та прізвище та середній бал), у яких середній бал більше 90
    сам формат наповнення цього списку up to you
3 - визначити середній бал по групі
4 - при відсутності номеру телефону у студента записати номер деканату як значення за замовчуванням (номер на ваш вибір)

не забувайте виводити інформаційні повідомлення щодо інформації, яку ви виводите
"""

"""

student = {

'Іван Петров': {

'Пошта': 'Ivan@gmail.com',

'Вік': 21,

'Номер телефону': '+380987771221',

'Середній бал': 95.8

},

'Женя Курич': {

'Пошта': 'Geka@gmail.com',

'Вік': 22,

'Номер телефону': None,

'Середній бал': 64.5

},

'Маша Кера': {

'Пошта': 'Masha@gmail.com',

'Вік': 18,

'Номер телефону': '+380986671221',

'Середній бал': 90

},

}
# # ваш код нижче

# 1)програмно добавити одного студента, з заповненням усіх полів (вік - від 18 до 40, цілочисельне значення,
#     бал від 0 до 100 (інт чи флоат)
student.update({'Юрій Шпак':{
    "Пошта" : 'yura_chpak@ukr.net',
    'Вік': 30,
    'Номер телефону': '0957458292',
    'Середній бал': 85}})
print(student)
# 2) створити і вивести на екран список студентів (імя та прізвище та середній бал), у яких середній бал більше 90
#   сам формат наповнення цього списку up to you
#
# for key in student:             # виводить все
#     print(key, student[key])
#
best_student = []
for name, info in student.items():
    avg_mark = info['Середній бал']
    if avg_mark > 90:
        best_student.append((name, avg_mark))
        print(best_student)

# 3) визначити середній бал по групі
group_marks = []
for student_info in student.values():
    group_marks.append(student_info['Середній бал'])
group_avg_mark = sum(group_marks) / len(group_marks)
print(group_avg_mark)

# 4) при відсутності номеру телефону у студента записати номер деканату як значення за замовчуванням (номер на ваш вибір)

print(student.get(None, 'Номер деканату - 0959433382'))
